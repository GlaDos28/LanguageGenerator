<$Ident>          ::= <Letter> <OptIdent> | "_" <OptIdent> .
<$Number>         ::= <Digit> <OptNumber> .
<$String>         ::= "\"" <OptString> "\"" .
<$RuleSymbols>    ::= "@" <OptRuleSymbols> "@" .
<$Dollar>         ::= "$" .
<$Or>             ::= "|" .
<$OpenSign>       ::= "<" .
<$CloseSign>      ::= ">" .
<$OpenBrace>      ::= "{" .
<$CloseBrace>     ::= "}" .
<$Assign>         ::= "::=" .
<$Dot>            ::= "." .
<$OptIdent>       ::= <Letter> <OptIdent> | <Digit> <OptIdent> | "_" <OptIdent> | .
<$OptNumber>      ::= <Digit> <OptNumber> | .
<$OptString>      ::= <StringSymbol> <OptString> | .
<$OptRuleSymbols> ::= <RuleSymbol> <OptRuleSymbols> | .
<$StringSymbol>   ::= <Symbol> | "\\\"" | "\\n" | "\\t" | "\\\\" | "@" | "`" .
<$RuleSymbol>     ::= <Symbol> | "\"" | "\n" | "\t" | "\\" | "`@" | "``" .
<$Symbol>         ::= <Digit> | <Letter> | " " | "_" | "'" | "!" | "?" | "-" | "+" | "=" | "/" | "," | "{" | "}" | "[" | "]" | "(" | ")" | "*" | "&" | "^" | "%" | "#" | "$" | ":" | ";" | ">" | "~" | "." | "<" | "|" .
<$Letter>         ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" .
<$Digit>          ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .

<BNF>             ::= { 1 } <Nonterminals> <Rules> { 2 } .
<Nonterminals>    ::= <Nonterminal> <Nonterminals> | .
<Nonterminal>     ::= <OpenSign> <Dollar> <Ident> { 3 } <CloseSign> <Assign> <Productions> <Dot> | <OpenSign> <Ident> { 4 } <CloseSign> <Assign> <Productions> <Dot> .
<Productions>     ::= { 5 } <Production> <OptProductions> .
<OptProductions>  ::= <Or> { 6 } <Production> <OptProductions> | .
<Production>      ::= <OpenSign> <Ident> { 7 } <CloseSign> <Production> | <String> { 8 } <Production> | <OpenBrace> <Number> { 9 } <CloseBrace> <Production> | .
<Rules>           ::= <Rule> <Rules> | .
<Rule>            ::= <Number> <RuleSymbols> { 10 } .

0 @StringBuilder builder = new StringBuilder();
   		final ArrayList<Pair<Pair<String, Boolean>, ArrayList<ArrayList<Pair<String, Boolean>>>>> nonterminals = new ArrayList<>(); /* true - element, false - string, null - semantic rule */
   		final Map<String, String> semanticRules = new HashMap<>();@

1 @builder
   					.append("package ")
                    .append(packageName)
                    .append(
                    	";\n\n" +
                    	"import _lib_language_generator_.structures.bnf.BNF;\n" +
                    	"import _lib_language_generator_.structures.bnf.productions.BNF_BasicProduction;\n" +
                    	"import _lib_language_generator_.structures.bnf.productions.BNF_LexemeProduction;\n" +
                    	"import _lib_language_generator_.structures.bnf.productions.misc.elements.BNF_NT;\n" +
                    	"import _lib_language_generator_.structures.bnf.productions.misc.elements.BNF_SRule;\n" +
                    	"import _lib_language_generator_.structures.bnf.productions.misc.elements.BNF_String;\n" +
                    	"import _lib_language_generator_.structures.bnf.productions.misc.elements.Element;\n\n" +
                    	"public final class ")
                    .append(className)
                    .append(
                    	" {\n\tpublic static final BNF BNF = new BNF();\n\n\tstatic {\n")
   				@

2 @{
   					if (semanticRules.containsKey("0"))
   						builder
   							.append("\t\t//** BNF initialization program fragment (semantic rule No.0)\n\n")
   							.append(semanticRules.get("0"))
   							.append("\n\n");

   					builder.append("\t\t//** nonterminals declaration\n\n");

   					for (Pair<Pair<String, Boolean>, ArrayList<ArrayList<Pair<String, Boolean>>>> nonterminal : nonterminals)
   						if (!nonterminal.getKey().getValue())
   							builder
   								.append("\t\tint _")
   								.append(nonterminal.getKey().getKey())
   								.append("_ = BNF.addNonterminal(new BNF_BasicProduction(\"")
   								.append(nonterminal.getKey().getKey())
   								.append("\"));\n");

   					builder.append('\n');

   					for (Pair<Pair<String, Boolean>, ArrayList<ArrayList<Pair<String, Boolean>>>> nonterminal : nonterminals)
   						if (nonterminal.getKey().getValue())
   							builder
   								.append("\t\tint _")
   								.append(nonterminal.getKey().getKey())
   								.append("_ = BNF.addLexeme(new BNF_LexemeProduction(\"")
   								.append(nonterminal.getKey().getKey())
   								.append("\"));\n");

   					builder.append("\n\t\t//** nonterminals products implementation\n\n");

   					//** nonterminals

   					for (Pair<Pair<String, Boolean>, ArrayList<ArrayList<Pair<String, Boolean>>>> nonterminal : nonterminals) {
   						if (nonterminal.getKey().getValue())
   							continue;

   						builder
   							.append("\t\tBNF.getNonterminal(_")
   							.append(nonterminal.getKey().getKey())
   							.append("_).setElements(new Element[][] {\n");

   						for (ArrayList<Pair<String, Boolean>> prod : nonterminal.getValue()) {
   							builder.append("\t\t\tnew Element[] {\n");

   							for (Pair<String, Boolean> elem : prod)
   								if (elem.getValue() == Boolean.TRUE)
   									builder
   										.append("\t\t\t\tnew BNF_NT(_")
   										.append(elem.getKey())
   										.append("_),\n");
   								else /* null, not false */
   									builder
   										.append("\t\t\t\tnew BNF_SRule(tokens -> () -> ")
   										.append(semanticRules.get(elem.getKey()))
   										.append("),\n");

   							if (!prod.isEmpty())
   								builder.delete(builder.length() - 2, builder.length()); /* removes redundant comma */

   							builder.append("\n\t\t\t},\n");
   						}

   						builder.delete(builder.length() - 2, builder.length()); /* removes redundant comma */
   						builder.append("\n\t\t});\n\n");
   					}

   					//** lexemes

   					for (Pair<Pair<String, Boolean>, ArrayList<ArrayList<Pair<String, Boolean>>>> nonterminal : nonterminals) {
   						if (!nonterminal.getKey().getValue())
   							continue;

   						builder
   							.append("\t\tBNF.getLexeme(_")
   							.append(nonterminal.getKey().getKey())
   							.append("_).setElements(new Element[][] {\n");

   						for (ArrayList<Pair<String, Boolean>> prod : nonterminal.getValue()) {
   							builder.append("\t\t\tnew Element[] {\n");

   							for (Pair<String, Boolean> elem : prod)
   								if (elem.getValue())
   									builder
   										.append("\t\t\t\tnew BNF_NT(_")
   										.append(elem.getKey())
   										.append("_),\n");
   								else /* false, not null */
   									builder
   										.append("\t\t\t\tnew BNF_String(\"")
   										.append(elem.getKey())
   										.append("\"),\n");

   							if (!prod.isEmpty())
   								builder.delete(builder.length() - 2, builder.length()); /* removes redundant comma */

   							builder.append("\n\t\t\t},\n");
   						}

   						builder.delete(builder.length() - 2, builder.length()); /* removes redundant comma */
   						builder.append("\n\t\t});\n\n");
   					}

   					if (!nonterminals.isEmpty())
   						builder.delete(builder.length() - 1, builder.length()); /* removes redundant newline */

   					//**

                    if (semanticRules.containsKey("999"))
						builder
							.append("\n\t\t//** BNF finalization program fragment (semantic rule No.999)\n\n\t\t")
							.append(semanticRules.get("999"));

   					builder
   					    .append("\n\t}\n\n\tprivate ")
                    	.append(className)
                    	.append("() {}\n}\n");

   					try (BufferedWriter writer = new BufferedWriter(new FileWriter(outPath))) {
   						writer.write(builder.toString());
   					}
   					catch (IOException ex) {
   						System.out.println(ex.getMessage());
   					}
   				}@

3 @nonterminals.add(new javafx._lib_language_generator_.util.Pair<>(new javafx._lib_language_generator_.util.Pair<>(tokens[2].getValue(), true), new java._lib_language_generator_.util.ArrayList<>()))@

4 @nonterminals.add(new javafx._lib_language_generator_.util.Pair<>(new javafx._lib_language_generator_.util.Pair<>(tokens[1].getValue(), false), new java._lib_language_generator_.util.ArrayList<>()))@

5 @nonterminals.get(nonterminals.size() - 1).getValue().add(new java._lib_language_generator_.util.ArrayList<>())@

6 @nonterminals.get(nonterminals.size() - 1).getValue().add(new java._lib_language_generator_.util.ArrayList<>())@

7 @nonterminals.get(nonterminals.size() - 1).getValue().get(nonterminals.get(nonterminals.size() - 1).getValue().size() - 1).add(new javafx._lib_language_generator_.util.Pair<>(tokens[1].getValue(), true))@

8 @nonterminals.get(nonterminals.size() - 1).getValue().get(nonterminals.get(nonterminals.size() - 1).getValue().size() - 1).add(new javafx._lib_language_generator_.util.Pair<>(Methods.getEscapedString(Methods.getUnescapedString(tokens[0].getValue().substring(1, tokens[0].getValue().length() - 1))), false))@

9 @nonterminals.get(nonterminals.size() - 1).getValue().get(nonterminals.get(nonterminals.size() - 1).getValue().size() - 1).add(new javafx._lib_language_generator_.util.Pair<>(tokens[1].getValue(), null))@

10 @semanticRules.put(tokens[0].getValue(), tokens[1].getValue().substring(1, tokens[1].getValue().length() - 1))@